@using HelpDesk.Models.Dto.Auth
@using HelpDesk.Models.Enums.Extensions
@using HelpDesk.Utils

@inject StorageSession Session
@inject NavigationManager Navigation

<MudPaper Width="300px" Elevation="0">
    <MudNavMenu Rounded="true" Margin="Margin.Dense" Class="pa-2">
        @if (_deskToken is not null)
        {
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Secondary">@_deskToken.LastName.FirstOrDefault()@_deskToken.FirstName.FirstOrDefault()</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@_deskToken.LastName @_deskToken.FirstName</MudText>
                    <MudText Typo="Typo.body2">@_deskToken.IdentityType.GetDisplayName()</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudMenu Icon="@Icons.Material.Filled.Settings"
                             Color="Color.Primary">
                        <MudMenuItem Label="Интеграция с телеграмм" />
                        <MudMenuItem OnClick="() => { Session.ClearSession();  }" Label="Выход" />
                    </MudMenu>
                </CardHeaderActions>
            </MudCardHeader>
        }
        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Book">Мои заявки</MudNavLink>
        <MudNavLink Href="/admin" Icon="@Icons.Material.Filled.Science">Админ панель</MudNavLink>
    </MudNavMenu>
</MudPaper>

@code {

    private DeskToken? _deskToken;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _deskToken = await Session.GetCurrentAccessToken();
    }

}