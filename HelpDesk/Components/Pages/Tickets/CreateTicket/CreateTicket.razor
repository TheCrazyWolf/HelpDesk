@page "/tickets/create"

@using HelpDesk.Models.Dto.Auth
@using HelpDesk.Models.Dto.Tickets.Tickets
@using HelpDesk.Models.Enums.Devices
@using HelpDesk.Models.Enums.Extensions
@using HelpDesk.Models.Enums.Tickets
@using HelpDesk.Models.PLA.Devices
@using HelpDesk.Models.PLA.Tickets
@using HelpDesk.Services.Tickets
@using HelpDesk.Utils
@using HelpDesk.Components.Pages.Tickets.CreateTicket.Components

@inject TicketService TicketService
@inject StorageSession Session

<MudText Typo="Typo.h6" GutterBottom="true" Align="Align.Start">Создание новой заявки</MudText>

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Class="mt-2" Elevation="0">
            <MudText Class="mb-2">Описание проблемы</MudText>
            <MudForm >
                <MudTextField T="string" bind-Value="_createDto.Title" Label="Тема"/>
                <MudTextField T="string" bind-Value="_createDto.Description" Lines="6" Label="Подробное описание"/>
            </MudForm>
        </MudPaper>
        <MudPaper Class="mt-2" Elevation="0">
            <DeviceComponentOfTicketCreate CreateDto="_createDto" />
        </MudPaper>
        <MudPaper Class="mt-2" Elevation="0">
            <DocumentFilesOfTicketCreate CreateDto="_createDto"/> 
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class=mt-2 Elevation="0">
            <MudText Class="mb-2">
                Дополнительная информация
            </MudText>
            <MudForm>
                <MudSelect @bind-Value="_createDto.Type"
                           Label="Категория заявки">
                    @foreach (var type in Enum.GetValues(typeof(TicketType)).Cast<TicketType>())
                    {
                        <MudSelectItem Value="@type">@type.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect @bind-Value="_createDto.Priority"
                           Label="Приоритет">
                    @foreach (var levelPriority in Enum.GetValues(typeof(TicketLevelPriority)).Cast<TicketLevelPriority>())
                    {
                        <MudSelectItem Value="@levelPriority">@levelPriority.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField T="string" bind-Value="_createDto.PlaceOfIssue" Label="Место ЧП"/>
                <MudStack Class="mt-4" Row="true" Spacing="0">
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Send"
                               Color="Color.Primary">Отправить</MudButton>
                </MudStack>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {

    private DeskToken? _deskToken;

    private TicketCreateDto _createDto = new()
    {
        Devices = new List<DeviceView>()
        {
            new DeviceView()
            {
                InvNumber = "345345",
                Type = DeviceType.Mobile
            }
        }
    };

    private IEnumerable<TicketView>? _tickets;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _deskToken = await Session.GetCurrentAccessToken();
        if (_deskToken is null) return;
        await LoadTickets();
    }


    public async Task LoadTickets()
    {
        try
        {
            _tickets = await TicketService.ShowTicketsByAccountId(_deskToken!.Id);
        }
        catch (Exception e)
        {
            // show window
        }
    }
    

    private Task DownloadFile(long fileId)
    {
        throw new NotImplementedException();
    }

}