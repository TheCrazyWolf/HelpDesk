@using BlazorDownloadFile
@using HelpDesk.Models.Dto.Auth
@using HelpDesk.Models.Dto.Tickets.Tickets
@using HelpDesk.Models.PLA.Documents
@using HelpDesk.Services.Documents

@inject DocumentService DocumentService
@inject IBlazorDownloadFileService BlazorDownloadFileService

<MudText Class="mb-0">Документы/файлы</MudText>
<MudForm>
    <MudStack Class="mt-4" Row="true" Spacing="0">
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles!">
            <ActivatorContent>
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Create"
                           Size="Size.Small"
                           Color="Color.Primary">
                    Загрузить файл
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
    </MudStack>
    <MudList Class="mt-2" T="DeskDocumentView">
        @if (!string.IsNullOrEmpty(_errorMsg))
        {
            <MudAlert Severity="Severity.Error" Class="mt-2" ShowCloseIcon="true" CloseIconClicked="() => _errorMsg = string.Empty">
                @_errorMsg
            </MudAlert>
        }
        @foreach (var file in CreateDto.Files)
        {
            <MudListItem OnClick="() => DownloadFile(file)" Icon="@Icons.Material.Filled.AttachFile">
                <code>@file.FileName </code>
                <MudIconButton Class="ms-4" OnClick="@(() => RemoveFile(file))" 
                               Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Delete" 
                               Color="Color.Error"/>
            </MudListItem>
        }
    </MudList>
</MudForm>


@code {

    [Parameter] public TicketCreateDto CreateDto { get; set; } = default!;
    [Parameter] public DeskToken? DeskToken { get; set; } = default!;
    
    private string _errorMsg = string.Empty;

    private async Task DownloadFile(DeskDocumentView fileId)
    {
        try
        {
            var stream = await DocumentService.DownloadFileAsync(fileId.Id);
            await BlazorDownloadFileService.DownloadFile(fileId.FileName, stream.ToArray(), "application/octet-stream");
        }
        catch (Exception e)
        {
            _errorMsg = e.Message;
        }
    }

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> arg)
    {
        try
        {
            foreach (var file in arg) CreateDto.Files.Add(await DocumentService.UploadFile(file, DeskToken!.Id));
        }
        catch (Exception e)
        {
            _errorMsg = e.Message;
        }
    }

    private async Task RemoveFile(DeskDocumentView file)
    {
        try
        {
            await DocumentService.RemoveFile(file.Id);
            CreateDto.Files.Remove(file);
        }
        catch (Exception e)
        {
            _errorMsg = e.Message;
        }
    }

}