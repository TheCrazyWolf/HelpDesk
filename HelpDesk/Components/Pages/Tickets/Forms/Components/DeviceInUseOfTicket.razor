@using HelpDesk.Modals
@using HelpDesk.Models.Dto.Devices
@using HelpDesk.Models.Enums.Extensions
@using HelpDesk.Models.Enums.Identity
@using HelpDesk.Models.PLA.Tickets
@using HelpDesk.Services.Devices
@using HelpDesk.Services.Tickets
@using HelpDesk.Utils

@inject IDialogService DialogService
@inject TicketExecutorService TicketExecutorService
@inject DeviceInUseService DeviceServiceInUser
@inject StorageSession Session

<MudText Typo="Typo.subtitle2" Class="mb-0 mt-4">Оборудование в заявке</MudText>
<MudForm>
    <MudStack Class="mt-4" Row="true" Spacing="0">
        @if (Session.DeskToken?.IdentityType is IdentityType.TechSupport)
        {
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Create"
                       Size="Size.Small" OnClick="AttachNewDeviceToTicketModal"
                       Color="Color.Primary">
                Добавить оборудование
            </MudButton>
        }
    </MudStack>
    @if (!string.IsNullOrEmpty(_errorMsg))
    {
        <MudAlert Severity="Severity.Error" Class="mt-2" ShowCloseIcon="true"
                  CloseIconClicked="() => _errorMsg = string.Empty">
            @_errorMsg
        </MudAlert>
    }
    <MudList Class="mt-2" T="TicketDeviceInUseView">
        @foreach (var device in Ticket.Devices)
        {
            <MudListItem Icon="@Icons.Material.Filled.Devices">
                <code>@device.Device?.Type.GetDisplayName() №@device.Device?.InvNumber</code>
                @if (Session.DeskToken?.IdentityType is IdentityType.TechSupport)
                {
                    <MudIconButton OnClick="@(() => RemoveDevice(device))" Size="Size.Small"
                                   Variant="Variant.Outlined" Class="ms-4" Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"/>
                }
            </MudListItem>
        }
    </MudList>
</MudForm>

@code {

    [Parameter] public TicketView Ticket { get; set; } = new();
    [Parameter] public EditTicket.LoadTicketDelegate? LoadTicketDelegate { get; set; }

    private string _errorMsg = string.Empty;
    
    private async Task RemoveDevice(TicketDeviceInUseView device)
    {
        try
        {
            await DeviceServiceInUser.RemoveDeviceFromTicket(device.Id, await Session.GetCurrentAccessToken());
            await LoadTicketDelegate?.Invoke()!;
        }
        catch (Exception e)
        {
            _errorMsg = e.Message;
        }
    }

    public async Task AttachNewDeviceToTicketModal()
    {
        await DialogService.ShowDeviceDialog(new DeviceDto(), Ticket.Id);
        await LoadTicketDelegate?.Invoke()!;
    }

}