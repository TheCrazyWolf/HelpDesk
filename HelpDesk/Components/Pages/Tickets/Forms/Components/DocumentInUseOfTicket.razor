@using BlazorDownloadFile
@using HelpDesk.Models.Dto.Auth
@using HelpDesk.Models.PLA.Documents
@using HelpDesk.Models.PLA.Tickets
@using HelpDesk.Services.Documents
@using HelpDesk.Services.Tickets

@inject IDialogService DialogService
@inject TicketExecutorService TicketExecutorService
@inject DocumentService DocumentService
@inject IBlazorDownloadFileService BlazorDownloadFileService

<MudText Typo="Typo.subtitle2" Class="mb-0 mt-4">Документы, файлы, фото по заявке</MudText>
<MudForm>
    <MudList Class="mt-2" T="DeskDocumentView">
        @if (!string.IsNullOrEmpty(_errorMsg))
        {
            <MudAlert Severity="Severity.Error" Class="mt-2" ShowCloseIcon="true" CloseIconClicked="() => _errorMsg = string.Empty">
                @_errorMsg
            </MudAlert>
        }
        @foreach (var file in Ticket.Files)
        {
            <MudListItem OnClick="() => DownloadFile(file)" Icon="@Icons.Material.Filled.AttachFile">
                <code>@file.FileName </code>
            </MudListItem>
        }
    </MudList>
</MudForm>

@code {

    [Parameter] public TicketView Ticket { get; set; } = new();
    [Parameter] public DeskToken? DeskToken { get; set; } = default!;
    [Parameter] public EditTicket.LoadTicketDelegate? LoadTicketDelegate { get; set; }

    private string _errorMsg = string.Empty;

    private async Task DownloadFile(DeskDocumentView file)
    {
        try
        {
            var stream = await DocumentService.DownloadFileAsync(file.Id);
            await BlazorDownloadFileService.DownloadFile(file.FileName, stream.ToArray(), "application/octet-stream");
        }
        catch (Exception e)
        {
            _errorMsg = e.Message;
        }
    }
}