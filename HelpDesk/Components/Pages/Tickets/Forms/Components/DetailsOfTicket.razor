@using HelpDesk.Modals
@using HelpDesk.Models.Dto.Auth
@using HelpDesk.Models.Enums.Extensions
@using HelpDesk.Models.Enums.Identity
@using HelpDesk.Models.PLA.Tickets
@using HelpDesk.Services.Identity

@inject IdentityService IdentityService
@inject IDialogService DialogService

<table class="mt-4">
    <tr>
        <td>
            <MudText>Место:</MudText>
        </td>
        <td>
            <MudText>@Ticket?.PlaceOfIssue</MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Дата создания:</MudText>
        </td>
        <td>
            <MudText>@Ticket?.CreatedAt</MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Срок решения:</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None">
                <MudText>@(Ticket?.Deadline is null ? "Не назначено" : Ticket?.Deadline)</MudText>
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Class="ms-4" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="() => DialogService.ShowUpdateDeadline(Ticket!.Id)"
                                   aria-label="delete"/>
                }
            </MudStack>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Статус:</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None">
                <MudText>@Ticket?.Status.GetDisplayName()</MudText>
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Class="ms-4" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="() => DialogService.ShowUpdateStatus(Ticket!.Id)"
                                   aria-label="delete"/>
                }
            </MudStack>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Тип заявки</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None">
                <MudText>@Ticket?.Type.GetDisplayName()</MudText>
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Class="ms-4" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="() => DialogService.ShowUpdateType(Ticket!.Id)"
                                   aria-label="delete"/>
                }
            </MudStack>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Приоритет:</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None">
                <MudText>@Ticket?.Priority.GetDisplayName()</MudText>
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Class="ms-4" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="() => DialogService.ShowUpdatePriority(Ticket!.Id)"
                                   aria-label="delete"/>
                }
            </MudStack>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Последнее обновления заявки:</MudText>
        </td>
        <td>
            <MudText>@Ticket?.UpdatedAt</MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudText >Исполнители:</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" Wrap="Wrap.Wrap" AlignItems="AlignItems.Center"
                      StretchItems="StretchItems.None">
                @foreach (var executor in _executors)
                {
                    if (DeskToken?.IdentityType == IdentityType.TechSupport)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Default" Class="ms-0" OnClose="() 
                                     => Remove(executor)">@executor.Identity?.LastName @executor.Identity?.FirstName.FirstOrDefault().
                        </MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Size="Size.Small" Class="ms-0"
                                 Color="Color.Default">@executor.Identity?.LastName @executor.Identity?.FirstName.FirstOrDefault().
                        </MudChip>
                    }
                }
                @if (_executors.Count is 0)
                {
                    <MudText>Не назначено</MudText>
                }
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Add"/>
                }
            </MudStack>
        </td>
    </tr>
</table>

@code {

    [Parameter] public TicketView? Ticket { get; set; } = default!;
    [Parameter] public DeskToken? DeskToken { get; set; } = default!;

    private IList<TicketExecutorView> _executors = new List<TicketExecutorView>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    private async Task Remove(TicketExecutorView executor)
    {
        throw new NotImplementedException();
    }

}