@using HelpDesk.Modals
@using HelpDesk.Models.Dto.Auth
@using HelpDesk.Models.Enums.Extensions
@using HelpDesk.Models.Enums.Identity
@using HelpDesk.Models.Enums.Tickets
@using HelpDesk.Models.PLA.Tickets
@using HelpDesk.Services.Identity
@using HelpDesk.Services.Tickets

@inject IdentityService IdentityService
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject TicketExecutorService TicketExecutorService


<MudSimpleTable Class="mt-4" Style="overflow-x: auto;" Dense="true" Hover="true" Elevation="0">
    <tbody>
    <tr>
        <td>
            <MudText Typo="Typo.body1">Место:</MudText>
        </td>
        <td>
            <MudText>@Ticket.PlaceOfIssue</MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudText Typo="Typo.body1">Дата создания:</MudText>
        </td>
        <td>
            <MudText Typo="Typo.body1">@Ticket.CreatedAt</MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Срок решения:</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None">
                <MudText Color="@(Ticket.Deadline is null ? Color.Error : Color.Surface)" >@(Ticket.Deadline is null ? "Не назначено" : Ticket.Deadline.Value.ToString("dd.MM.yyyy"))</MudText>
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Class="ms-4" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="ShowModalDeadLine"/>
                }
            </MudStack>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Статус:</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None">
                <MudText >@Ticket.Status.GetDisplayName()</MudText>
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Class="ms-4" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="ShowModalStatus"/>
                }
            </MudStack>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Тип заявки</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None">
                <MudText >@Ticket.Type.GetDisplayName()</MudText>
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Class="ms-4" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="ShowModalType"/>
                }
            </MudStack>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Приоритет:</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None">
                <MudText Color="@(Ticket.Priority is TicketLevelPriority.Hard ? Color.Error : Color.Surface)">@Ticket?.Priority.GetDisplayName()</MudText>
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Class="ms-4" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="ShowModalPriority"/>
                }
            </MudStack>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Последнее обновления заявки:</MudText>
        </td>
        <td>
            <MudText>@Ticket.UpdatedAt</MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudText>Исполнители:</MudText>
        </td>
        <td>
            <MudStack Row="true" Spacing="0" Wrap="Wrap.Wrap" AlignItems="AlignItems.Center"
                      StretchItems="StretchItems.None">
                @foreach (var executor in Ticket.Executors)
                {
                    if (DeskToken?.IdentityType == IdentityType.TechSupport)
                    {
                        <MudChip T="string" Color="Color.Primary" Class="ms-0" OnClose="() => Remove(executor)">
                            @executor.Identity?.LastName @executor.Identity?.FirstName
                        </MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Class="ms-0" Color="Color.Primary">
                            @executor.Identity?.LastName @executor.Identity?.FirstName
                        </MudChip>
                    }
                }
                @if (Ticket!.Executors.Count is 0)
                {
                    <MudText Color="Color.Error">Не назначено</MudText>
                }
                @if (DeskToken?.IdentityType == IdentityType.TechSupport)
                {
                    <MudIconButton Size="Size.Small" OnClick="ShowModalAddExecutor" Icon="@Icons.Material.Filled.Add"/>
                }
            </MudStack>
        </td>
    </tr>
    </tbody>
</MudSimpleTable>


@code {

    [Parameter] public TicketView Ticket { get; set; } = new();
    [Parameter] public DeskToken DeskToken { get; set; } = new();
    [Parameter] public EditTicket.LoadTicketDelegate? LoadTicketDelegate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    private async Task Remove(TicketExecutorView executor)
    {
        try
        {
            await TicketExecutorService.RemoveExecutor(executor.Id, DeskToken!.Id);
            await LoadTicketDelegate?.Invoke()!;
        }
        catch (Exception e)
        {
        }
    }


    public async Task ShowModalDeadLine()
    {
        await DialogService.ShowUpdateDeadline(Ticket.Id);
        await LoadTicketDelegate?.Invoke()!;
    }

    public async Task ShowModalStatus()
    {
        await DialogService.ShowUpdateStatus(Ticket.Id);
        await LoadTicketDelegate?.Invoke()!;
    }

    public async Task ShowModalType()
    {
        await DialogService.ShowUpdateType(Ticket.Id);
        await LoadTicketDelegate?.Invoke()!;
    }

    public async Task ShowModalPriority()
    {
        await DialogService.ShowUpdatePriority(Ticket.Id);
        await LoadTicketDelegate?.Invoke()!;
    }

    public async Task ShowModalAddExecutor()
    {
        await DialogService.ShowAssignExecutor(Ticket.Id, DeskToken!.Id);
        await LoadTicketDelegate?.Invoke()!;
    }

}