@page "/auth/login"
@page "/auth"

@using HelpDesk.Components.Layout
@using HelpDesk.Models.Dto.Auth
@using HelpDesk.Utils

@layout AuthrizationLayout
@inject StorageSession Session
@inject NavigationManager Navigation


<PageTitle>HelpDesk: Вход в систему</PageTitle>

<EditForm Model="@_loginFormParams" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudCard Style="padding: 15px;" Class="p-5">
        <MudText Typo="Typo.h6">Вход в систему</MudText>
        @if (!string.IsNullOrEmpty(_stringErrorMessage))
        {
            <MudAlert Severity="Severity.Error"
                      ShowCloseIcon="true" CloseIconClicked="(() => _stringErrorMessage = string.Empty)">
                @_stringErrorMessage
            </MudAlert>
        }
        @if (_deskToken is null)
        {
            <MudAlert Class="mt-4 mb-4" Severity="Severity.Info">Используйте для входа учётные данные от личного кабинета преподавателя (mfc.samgk.ru)</MudAlert>
            <MudTextField Class="mt-4" Label="Логин"
                          @bind-Value="_loginFormParams.Username" For="@(() => _loginFormParams.Username)"/>
            <MudTextField Label="Пароль"
                          InputType="InputType.Password" @bind-Value="_loginFormParams.Password" For="@(() => _loginFormParams.Password)"/>
            <MudCheckBox @bind-Value="_loginFormParams.IsRememberMe" For="@(() => _loginFormParams.IsRememberMe)" Label="Запомнить меня"></MudCheckBox>
        }
        else
        {
            <MudAlert Severity="Severity.Info">
                Вы авторизованы в системе как: @_deskToken.LastName @_deskToken.FirstName
            </MudAlert>
        }
        <MudCardActions>
            @if (_deskToken is null)
            {
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined"
                           DropShadow="false"
                           Color="Color.Primary" >
                    Авторизоваться
                </MudButton>
            }
            else
            {
                <MudStack Row="true" Spacing="0" Justify="Justify.FlexStart">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined"
                               DropShadow="false" Href="/" Class="me-2"
                               Color="Color.Primary" >
                        Вернутся
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined"
                               DropShadow="false"
                               OnClick="() => ClearSession()"
                               Color="Color.Primary" >
                        Выйти
                    </MudButton>
                </MudStack>
            }
        </MudCardActions>
    </MudCard>
</EditForm>

@code {

    private readonly LoginParams _loginFormParams = new();
    private string _stringErrorMessage = string.Empty;
    private DeskToken? _deskToken;

    private async Task OnValidSubmit(EditContext arg)
    {
        try
        {
            await Session.Login(_loginFormParams);
            Navigation.NavigateTo("/");
        }
        catch (Exception e)
        {
            _stringErrorMessage = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _deskToken = await Session.GetCurrentAccessToken();
    }

    private async void ClearSession()
    {
        Session.ClearSession();
        _deskToken = null;
    }

}