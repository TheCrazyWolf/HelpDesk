@page "/auth/login"
@page "/auth"

@using HelpDesk.Components.Layout
@using HelpDesk.Models.Dto.Auth
@using HelpDesk.Utils

@layout AuthrizationLayout
@inject StorageSession Session
@inject NavigationManager Navigation


<PageTitle>HelpDesk: Вход в систему</PageTitle>

<EditForm Model="@_loginFormParams" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudCard Style="padding: 18px 20px 18px 20px;" Class="p-5">
        <MudText Typo="Typo.h6">HelpDesk: Вход в систему</MudText>
        @if (_deskToken is null)
        {
            <MudAlert Class="mt-4 " Severity="Severity.Normal">Используйте для входа учётные данные от личного
                кабинета преподавателя (mfc.samgk.ru)
            </MudAlert>
            @if (!string.IsNullOrEmpty(_stringErrorMessage))
            {
                <MudAlert Severity="Severity.Error"
                          Class="mt-2"
                          ShowCloseIcon="true" CloseIconClicked="(() => _stringErrorMessage = string.Empty)">
                    @_stringErrorMessage
                </MudAlert>
            }

            <MudTextField Class="mt-4" Label="Логин"
                          Disabled="_isBusy"
                          @bind-Value="_loginFormParams.Username" For="@(() => _loginFormParams.Username)"/>
            <MudTextField Label="Пароль" Style="padding-left: 0;"
                          Disabled="_isBusy"
                          InputType="InputType.Password" @bind-Value="_loginFormParams.Password"
                          For="@(() => _loginFormParams.Password)"/>
        }
        else
        {
            <MudAlert Severity="Severity.Info">
                Вы авторизованы в системе как: @_deskToken.LastName @_deskToken.FirstName
            </MudAlert>
        }
        <MudStack Class="mt-4" Row="true" Spacing="0" AlignItems="AlignItems.Center" StretchItems="StretchItems.None"
                  Justify="Justify.SpaceBetween">
            @if (_deskToken is null)
            {
                <MudCheckBox @bind-Value="_loginFormParams.IsRememberMe" For="@(() => _loginFormParams.IsRememberMe)"
                             Class="me-2"
                             Disabled="_isBusy"
                             Label="Запомнить меня"></MudCheckBox>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined"
                           DropShadow="false"
                           Disabled="_isBusy"
                           Color="Color.Primary">
                    Авторизоваться
                </MudButton>
            }
            else
            {
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined"
                           DropShadow="false" Href="/"
                           Color="Color.Primary">
                    Вернутся
                </MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined"
                           DropShadow="false"
                           OnClick="() => ClearSession()"
                           Color="Color.Primary">
                    Выйти
                </MudButton>
            }
        </MudStack>
    </MudCard>
</EditForm>

@code {

    private readonly LoginParams _loginFormParams = new();
    private string _stringErrorMessage = string.Empty;
    private DeskToken? _deskToken;
    private bool _isBusy = false;

    private async Task OnValidSubmit(EditContext arg)
    {
        _isBusy = true;
        try
        {
            await Session.Login(_loginFormParams);
            Navigation.NavigateTo("/");
        }
        catch (Exception e)
        {
            _stringErrorMessage = e.Message;
        }
        _isBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _deskToken = await Session.GetCurrentAccessToken();
    }

    private async void ClearSession()
    {
        Session.ClearSession();
        _deskToken = null;
    }

}