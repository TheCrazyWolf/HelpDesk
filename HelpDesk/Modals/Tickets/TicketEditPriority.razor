@using HelpDesk.Models.Dto.Tickets.Tickets
@using HelpDesk.Models.Enums.Extensions
@using HelpDesk.Models.Enums.Tickets
@using HelpDesk.Services.Tickets
@using HelpDesk.Utils
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@inject TicketService TicketService
@inject StorageSession SessionStorage

<EditForm Model="@IdTicket" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent >
            <MudStack Row="false">
                @if (!string.IsNullOrEmpty(_errorMsg))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2" ShowCloseIcon="true" CloseIconClicked="() => _errorMsg = string.Empty">
                        @_errorMsg
                    </MudAlert>
                }
                <MudSelect @bind-Value="_ticketUpdate.Priority" Label="Выберите категорию">
                    @foreach (var status in Enum.GetValues(typeof(TicketLevelPriority)).Cast<TicketLevelPriority>())
                    {
                        <MudSelectItem Value="@status">@status.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Dark" OnClick="@Cancel">Закрыть</MudButton>
            <MudButton Color="Color.Primary" OnClick="@SubmitAsync">Сохранить</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public long IdTicket { get; set; } = new();
    private TicketUpdatePriority _ticketUpdate = new();
    private string _errorMsg = string.Empty;

    private async Task SubmitAsync()
    {
        try
        {
            await TicketService.UpdatePriority(_ticketUpdate, await SessionStorage.GetCurrentAccessToken());
            MudDialog.Close();
        }
        catch (Exception e)
        {
            _errorMsg = e.Message;
        }
    }

    private void Cancel(MouseEventArgs arg)
    {
        MudDialog.Close();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            _ticketUpdate = await TicketService.GetDtoUpdatePriority(IdTicket);
        }
        catch (Exception e)
        {
            _errorMsg = e.Message;
        }
    }

}