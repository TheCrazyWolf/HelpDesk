@using HelpDesk.Models.Dto.Devices
@using HelpDesk.Models.Enums.Devices
@using HelpDesk.Models.Enums.Extensions
@using HelpDesk.Services.Devices
@using HelpDesk.Utils
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@inject DeviceService DeviceService
@inject DeviceInUseService DeviceServiceInUser
@inject StorageSession Session

<EditForm Model="@DeviceDto" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            @if (!string.IsNullOrEmpty(_errorMsg))
            {
                <MudAlert Severity="Severity.Error" Class="mt-2" ShowCloseIcon="true"
                          CloseIconClicked="() => _errorMsg = string.Empty">
                    @_errorMsg
                </MudAlert>
            }
            <MudStack Row="true">
                <MudTextField T="string" @bind-value="DeviceDto.InvNumber" Label="Инвентарный номер"></MudTextField>
            </MudStack>
            <MudSelect @bind-Value="DeviceDto.Type"
                       Label="Приоритет">
                @foreach (var deviceType in Enum.GetValues(typeof(DeviceType)).Cast<DeviceType>())
                {
                    <MudSelectItem Value="@deviceType">@deviceType.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Dark" OnClick="@Cancel">Закрыть</MudButton>
            <MudButton Color="Color.Info" OnClick="@SubmitAsync">Сохранить</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public DeviceDto DeviceDto { get; set; } = new();
    [Parameter] public long IdTicket { get; set; } = new();
    private string _errorMsg = string.Empty;

    private async Task SubmitAsync()
    {
        try
        {
            var view = await DeviceService.CreateOrUpdate(DeviceDto);
            await DeviceServiceInUser.AttachDeviceToTicket([view], IdTicket, await Session.GetCurrentAccessToken());
            MudDialog.Close();
        }
        catch (Exception e)
        {
            _errorMsg = e.Message;
        }
    }

    private void Cancel(MouseEventArgs arg)
    {
        MudDialog.Close();
    }

}